<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- 配置注解扫描开关 -->
	<context:component-scan base-package="com.softeem" />
	
	<!-- 引入属性文件   -->
	<context:property-placeholder location="classpath:jdbc.properties"/>
	
	<!-- 配置数据源 : 数据库连接池  c3p0
	druid: DruidDataSource
	dbcp:  BasicDataSource
	c3p0:  ComboPooledDataSource
	-->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.mysql.driver}"></property>
		<property name="jdbcUrl" value="${jdbc.mysql.url}"></property>
		<property name="user" value="${jdbc.mysql.username}"></property>
		<property name="password" value="${jdbc.mysql.password}"></property>
	</bean>	
	
	<!-- 将spring和mybatis进行整合 -->
	<!--1、将SqlSessionFactory纳入到spring容器中  -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 配置数据源 -->
		<property name="dataSource" ref="dataSource"></property>	
	</bean>
	
	
	<!-- 配置Mapper接口的扫描信息 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.softeem.mapper"></property>
	</bean>

	<!-- 事务的四个特性： ACID   原子性、一致性、隔离性、持久性
	    事务应用在哪一层： Service层
	    Spring的事务管理： 1）编码方式 2）声明式的事务管理    xml中配置   | 使用注解
	    
	    事务的：
	    	1) 隔离级别：default 、 读未提交、读已提交、可重复读、可序列化(可串行化)
	    	2) 事务的传播行为； 7种，常用的两种:required、 supports ,
	    	3) 是否只读 ： 配置在 查询 的方法上
	
	   1、配置 事务管理器    -> DataSourceTransactionManager、HibernateTransactionManager  、JPATransactionManager
	   2、配置 事务通知 : 使用tx命名空间
	   3、配置 事务切面    AOP ： spring-aop.jar 、 aspectj相关jar包 
	 -->
	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 指定数据源 -->
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 配置事务通知  : 必须配置 事务管理器 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes> <!-- isolation：事务的隔离级别 ，read-only：事务是否只读，  propagation：事务的传播行为 -->
			<tx:method name="insert*" propagation="REQUIRED"/>  <!-- service层中向数据库 insert 的方法  -->
			<tx:method name="add*" propagation="REQUIRED"/>
			<tx:method name="tianJia*" propagation="REQUIRED"/>
			
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="change*" propagation="REQUIRED"/>
			<tx:method name="modify*" propagation="REQUIRED"/>
			<tx:method name="edit*" propagation="REQUIRED"/>
			
			<tx:method name="del*" propagation="REQUIRED"/>
			<tx:method name="remove*" propagation="REQUIRED"/>
			
			<tx:method name="query*" read-only="true" propagation="SUPPORTS"/>
			<tx:method name="select*" read-only="true" propagation="SUPPORTS"/>
			
			<!-- 通用的 -->
			<tx:method name="*" propagation="SUPPORTS"/>			
		</tx:attributes>
	</tx:advice>
	
	<!-- 
		aop的作用： 再不改变已有核心代码的基础上，实现业务扩展 （开闭原则 : 对修改关闭，对扩展开发）
		几个相关的概念：
			通知： 
				前置通知 before
				后置返回通知 after-returning
				后置异常通知 after-throwing
				后置最终通知  after
				环绕通知  around
			连接点 
			切入点
			切面（通知 + 切入点）
			织入
			目标对象
			目标方法
			代理对象 （ ... ）
		
	 -->
	
	<!-- 配置事务切面 -->
	<aop:config>  <!-- aop根标签 -->
	  	<!-- 配置单通知的切面: advice-ref：事务的通知   pointcut 切入点 （表达式） -->
		<aop:advisor advice-ref="txAdvice" pointcut=" execution(  * com.softeem.service.impl.*.*(..)  ) "/>
	
	</aop:config>

</beans>
